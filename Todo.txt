===============================================================================
Implementation:
===============================================================================

- Design a 'compact' (non xml) input language. Maybe make this look rather
  functional/haskell-ish. Also need a script to convert to this from the XML. 

- Add some comments to the code in general, focusing on the code that
  is called from the application (i.e. the ModelFactory/creation + TypeUtils)

- Replace all the tabs with spaces!

- Create an external script which populates the refdb with the referecnces used
  in the dissertation: Why do we need to do this?

- Autogenerate the appendix

===============================================================================
Testing:
===============================================================================

- Add tests for the common operations using the refdb application
  (These need to be specified in the COLIN language itself)
  e.g. 
      - Create/delete a reference
      - Add/remove attributes to a reference
      - Set attributes on a reference
      - Test the saving and restoring mechanism
      **** Can we do all of the abobe using the references for this dissertation ****

===============================================================================
Bugs:
===============================================================================

- If an invalid refid is used in a refdb command, it currently does not error 
  on this case. Fix this and add a test for it!

===============================================================================
Optional:
===============================================================================

- Add a html report extension 'report html' command

- Make it possible to split the configuration (colin) xml file acrross multiple files.

- Make the framework accept input in the form of the compact colin language. 
  We could therefore either just write a custom parser, 
  or possibly we can also specify a grammar for this 
  and generate a parser (maybe using antler?)

- Allow custom commands to accept optional arguments.

- Measure the coverage for the tests

